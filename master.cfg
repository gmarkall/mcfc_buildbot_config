# MCFC Buildbot master.cfg

# Global variables
buildbot_home = '/var/lib/buildbot'
buildslave_home = buildbot_home+'/slaves/mcfc'

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a username and password.  The same username and
# password must be configured on the slave.
from buildbot.buildslave import BuildSlave
from topsecretsecrets import slavePassword
c['slaves'] = [BuildSlave("x86_64", slavePassword)]

# Environment for the buildslave
def gen_env(mcfc_builder, fluidity_builder):
    mcfc_dir = buildslave_home+'/'+mcfc_builder+'/build'
    fluidity_dir = buildslave_home+'/'+fluidity_builder+'/build'
    return {
        'MCFC_DIR': mcfc_dir,
        'PATH': '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/cuda/bin',
        'PETSC_ARCH': 'linux-gnu-c-opt', 'PETSC_DIR': '/usr/lib/petscdir/3.1',
        'PYTHONPATH': mcfc_dir+':'+fluidity_dir+'/femtools',
        'LD_LIBRARY_PATH': fluidity_dir+'/femtools:/usr/local/cuda/lib64'
    }

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

from buildbot.changes.pb import PBChangeSource
c['change_source'] = [PBChangeSource()]

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.scheduler import Scheduler
c['schedulers'] = []
c['schedulers'].append(Scheduler(name="all", branch="master",
            treeStableTimer=None,
            builderNames=["runtests", "fluidity"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.config import BuilderConfig
from buildbot.process.factory import BuildFactory, s
from buildbot.steps.shell import SetProperty, ShellCommand
from buildbot.steps.source import Bzr, Git
from buildbot.process import factory
# Note: thise requires buildbot 0.8.5
from buildbot.process.properties import Property

c['builders'] = []

#### MCFC

def mcfc_builder(name, repourl, env):
    fac = BuildFactory()
    # check out the source
    fac.addStep(Git(repourl=repourl, mode='copy'))
    # run the tests
    fac.addStep(
        ShellCommand(command=["python", "autotest.py", "--non-interactive", "--with-objvis"],
            env=env,
            workdir="build/tests",
            description="running the autotests") )

    return BuilderConfig(name=name, slavenames=["x86_64"], factory=fac)

# MCFC autotests (runtests)
# Builder for MCFC autotests run on the master branch

mcfc_repourl = 'git://github.com/gmarkall/manycore_form_compiler.git'
env_x86_64=gen_env('runtests','fluidity')

c['builders'].append( mcfc_builder('runtests', mcfc_repourl, env_x86_64) )

# MCFC autotests (dev branch)
# Builder for MCFC autotests run on the mcfc-dev repository
# This provides an alternative build queue for intermediate testing of features
# not yet ready to pull into master

mcfc_devurl = '/data/fr710/repo/mcfc/mcfc-dev.git'
env_x86_64_dev = gen_env('devtests','fluidity-dev')

c['builders'].append( mcfc_builder("devtests", mcfc_devurl, env_x86_64_dev) )

#### Fluidity

# When we get the notification from github, source.bzr tries to use
# the specified branch and revision from the update. Since the revision
# from the mcfc repository makes no sense in the fluidity repository,
# this hack is to overcome this behaviour and make it grab the latest revision
class Bizarre(Bzr):

    def startVC(self, branch, revision, patch):
        Bzr.startVC(self, "ufl-input", None, patch)

def fluidity_build(name, repo, env):
    steps = [ s(Bizarre, repourl=None, baseURL=repo, defaultBranch="ufl-input", mode='update'),
            # This gives the number of physical cores
            #s(SetProperty, command="fgrep -m 1 'cpu cores' /proc/cpuinfo | cut -d ' ' -f 3",
                        #property="threads", name="Set number of threads for make"),
            # This gives the number of hyperthreaded cores
            s(SetProperty, command="cat /proc/cpuinfo | grep processor | wc -l",
                        property="threads", name="Set number of threads for make"),
            s(ShellCommand,
                command=["./autogen.sh"],
                workdir="build/spatialindex-1.5",
                env=env,
                description=["spatialindex autogen.sh"],
                haltOnFailure=True),
            s(ShellCommand,
                command=["./configure", "--enable-2d-adaptivity", "--enable-mba3d", "--enable-algencan", "--enable-shared"],
                env=env,
                description=["configuring"],
                haltOnFailure=True),
            s(ShellCommand,
                command=["make", "-j", Property("threads"),"clean"],
                env=env,
                description=["cleaning"],
                haltOnFailure=True),
            s(ShellCommand,
                command=["make", "-j", Property("threads")],
                env=env,
                description=["building"],
                haltOnFailure=True),
            s(ShellCommand,
                command=["make","-C","femtools","clean-elements"],
                env=env,
                description=["cleaning get_element"],
                haltOnFailure=True),
            s(ShellCommand,
                command=["make","-C","femtools", "-j", Property("threads"),"get_element"],
                env=env,
                description=["building get_element"],
                haltOnFailure=True),
            s(ShellCommand,
                command=["make", "-j", Property("threads"),"flufl"],
                env=env,
                description=["UFL building"],
                haltOnFailure=True),
            s(ShellCommand,
                command=["make","ufltest"],
                env=env,
                description=["UFL Testing"],
                haltOnFailure=True) ]

    fac = BuildFactory(steps)

    return BuilderConfig(name=name, slavenames=["x86_64"], factory=fac)

# Fluidity tests

flubzr = 'lp:~fluidity-core/fluidity/'

c['builders'].append(fluidity_build("fluidity", flubzr, env_x86_64))

# Fluidity tests (dev branch)

devbzr = '/data/fr710/repo/fluidity/'

c['builders'].append(fluidity_build("fluidity-dev", devbzr, env_x86_64_dev))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import auth, authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more options
    gracefulShutdown = True,
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = True,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg, change_hook_dialects={ 'github' : True}))

from buildbot.status import words
irc = words.IRC("irc.freenode.net", "mcfc-bot",
	     channels=["mcfc"],
             allowForce=True,
	     notify_events={
	       'exception': 1,
	       'successToFailure': 1,
	       'failureToSuccess': 1,
	     })
c['status'].append(irc)

####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "Manycore Form Compiler"
c['projectURL'] = "https://github.com/gmarkall/manycore_form_compiler"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://triassic04.doc.ic.ac.uk:8010/"

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"

# vi:syntax=python:sw=4:ts=4:sts=4:et
