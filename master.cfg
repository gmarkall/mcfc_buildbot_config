# MCFC Buildbot master.cfg

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a username and password.  The same username and
# password must be configured on the slave.
from buildbot.buildslave import BuildSlave
from topsecretsecrets import slavePassword
c['slaves'] = [BuildSlave("x86_64", slavePassword)]

# Environment for the buildslave
env_x86_64 = {
'PETSC_ARCH': 'linux-gnu-c-opt', 'PETSC_DIR': '/usr/lib/petscdir/3.0.0',
'MCFC': '/var/lib/buildbot/slaves/mcfc/runtests/build',
'PYTHONPATH': '/var/lib/buildbot/local/lib/python2.6/site-packages:/var/lib/buildbot/slaves/mcfc/runtests/build:/var/lib/buildbot/local/src/spud/python',
'MCFC': '/var/lib/buildbot/slaves/mcfc/runtests/build',
'PATH': '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/cuda/bin'
}
# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

from buildbot.changes.pb import PBChangeSource
c['change_source'] = [PBChangeSource()]

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.scheduler import Scheduler
c['schedulers'] = []
c['schedulers'].append(Scheduler(name="all", branch="master",
                                 treeStableTimer=None,
                                 builderNames=["runtests", "fluidity"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps import source, shell
from buildbot.steps.shell import ShellCommand
from buildbot.process import factory

s = factory.s

# MCFC autotests (runtests)

fac_runtests = BuildFactory()
# check out the source
fac_runtests.addStep(source.Git(repourl='git://github.com/gmarkall/manycore_form_compiler.git', mode='copy'))
# run the tests
fac_runtests.addStep(ShellCommand(command=["python", "autotest.py", "--non-interactive"], env=env_x86_64,  workdir="build/tests", description="running the autotests"))

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="runtests",
      slavenames=["x86_64"],
      factory=fac_runtests))

# Fluidity

flubzr = "lp:~fluidity-core/fluidity/"

fluidity = [s(source.Bzr, mode='update', baseURL=flubzr, defaultBranch="ufl-input"),
            s(shell.ShellCommand, command=["./configure", "--enable-2d-adaptivity", "--enable-mba3d", "--enable-algencan"], env=env_x86_64, description=["configuring"], haltOnFailure=True),
            s(shell.ShellCommand, command=["make","clean"], env=env_x86_64, description=["cleaning"], haltOnFailure=True),
            s(shell.ShellCommand, command=["make"], env=env_x86_64, description=["building"], haltOnFailure=True),
            s(shell.ShellCommand, command=["make","flufl"], env=env_x86_64, description=["UFL building"], haltOnFailure=True),
            s(shell.ShellCommand, command=["make","ufltest"], env=env_x86_64, description=["UFL Testing"], haltOnFailure=True),
            ]

fac_fluidity = BuildFactory(fluidity)

build_fluidity = BuilderConfig(name="fluidity",
                               slavenames=["x86_64"],
                               factory=fac_fluidity)

c['builders'].append(build_fluidity)

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import auth, authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg, change_hook_dialects={ 'github' : True}))

from buildbot.status import words
irc = words.IRC("irc.freenode.net", "mcfc-bot",
	     channels=["mcfc"],
             allowForce=True,
	     notify_events={
	       'exception': 1,
	       'successToFailure': 1,
	       'failureToSuccess': 1,
	     })
c['status'].append(irc)

####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "Manycore Form Compiler"
c['projectURL'] = "https://github.com/gmarkall/manycore_form_compiler"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://triassic04.doc.ic.ac.uk:8010/"

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"

# vi:syntax=python:
